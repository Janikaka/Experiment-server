swagger: "2.0"
info:
  version: "1.2"
  title: Experiment server
  description: API for experiments
  license:
    name: MIT
    url: http:/opensource.org/licenses/MIT
host: experiment-server2016.herokuapp.com
schemes:
  - http
produces:
  - application/json
consumes:
  - application/json
tags:
  - name: client
    description: client-related routes
  - name: application
    description: Application-related routes
  - name: configuration-keys
    description: Configurations
  - name: range-constraints
    description: Range-related routes
  - name: exclusion-constrains
    description: Exclusion-related routes
  - name: operators
    description: Operator-related routes
  - name: experiments
    description: Experiment-related routes
paths:

  /:
    get:
      summary: Get API information
      responses:
        200:
          description: OK
          schema:
              $ref: "../definitions.yaml#/API-info"


  /applications/{appid}/clients:
    get:
      tags:
        - client
      summary: Get all clients
      description: Gets all clients from the database
      parameters:
        - name: appid
          in: path
          description: Application id where client belongs to
          required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "../definitions.yaml#/Client"

    post:
      tags:
        - client
      summary: Create new client
      parameters:
        - name: appid
          in: path
          description: Application id where client belongs to
          required: true
        - name: client
          in: body
          description: client to create
          required: true
          schema:
            $ref: '../definitions.yaml#/Newclient'
      responses:
        200:
          description: OK


  applications/{appid}/clients/{clientid}:
    get:
      tags:
        - client
      summary: Get one client
      parameters:
        - name: appid
          in: path
          description: Application id where client belongs to
          required: true
        - name: clientid
          type: integer
          description: id of the client
          in: path
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "../definitions.yaml#/Client"
    delete:
      tags:
        - client
      summary: Delete one client
      parameters:
        - name: appid
          in: path
          description: Application id where client belongs to
          required: true
        - name: clientid
          type: integer
          description: id of the client
          in: path
          required: true
      responses:
        200:
          description: OK

  /applications/{appid}/clients/{clientid}/configurations:
    get:
      tags:
        - client
      summary: Get clients currenct configurations
      parameters:
        - name: appid
          type: integer
          description: if of Application Client was created to
          in: path
          required: true
        - name: clientid
          type: integer
          description: id of the current client
          in: path
          required: true
      responses:
        200:
          description: OK
          schema:
             type: array
             items:
              $ref: "../definitions.yaml#/Configuration"

  /applications/{appid}/clients/{id}/experiments:
    get:
      tags:
        - client
      summary: Get clients current experiments
      parameters:
        - name: appid
          type: integer
          description: if of Application Client was created to
          in: path
          required: true
        - name: clientid
          type: integer
          description: id of the current client
          in: path
          required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "../definitions.yaml#/Experiment"

  /applications:
    get:
      tags:
        - application
      summary: Get all applications
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "../definitions.yaml#/Application"
    post:
      tags:
        - application
      summary: Create new application
      parameters:
        - name: application
          in: body
          description: Application to create
          required: true
          schema:
            $ref: '../definitions.yaml#/NewApplication'
      responses:
        200:
          description: OK
          schema:
            $ref: "../definitions.yaml#/Application"


  /applications/{id}:
    get:
      tags:
        - application
      summary: Get one application
      parameters:
        - name: id
          type: integer
          description: id of the application
          in: path
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "../definitions.yaml#/Application"
        400:
          description: Bad Request
    delete:
      tags:
        - application
      summary: Delete one application
      parameters:
        - name: id
          type: integer
          description: id of the application
          in: path
          required: true
      responses:
        200:
          description: OK
        400:
          description: Bad Request

  /applications/{id}/configurationkeys:
    get:
      tags:
        - application
      summary: Get configurationkeys of one application
      parameters:
        - name: id
          type: integer
          description: id of the application
          in: path
          required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "../definitions.yaml#/ConfigurationKey"
        400:
          description: Bad Request
    post:
      tags:
        - application
      summary: Create new conf.key
      parameters:
        - name: id
          type: integer
          description: id of the application
          in: path
          required: true
        - name: configurationkey
          in: body
          description: Conf.key to create
          required: true
          schema:
            $ref: '../definitions.yaml#/NewConfigurationKey'
      responses:
        200:
          description: OK
          schema:
            $ref: '../definitions.yaml#/ConfigurationKey'

        400:
          description: Bad Request
    delete:
      tags:
        - application
      summary: Delete all conf.keys of one app
      parameters:
        - name: id
          type: integer
          description: id of the application
          in: path
          required: true
      responses:
        200:
          description: OK
        400:
          description: Bad Request

  /applications/{appid}/configurationkeys/{ckid}:
    get:
      tags:
        - configuration-keys
      summary: Get one configurationkey by application
      parameters:
        - name: ckid
          type: integer
          description: id of the configurationkey
          in: path
          required: true
        - name: appid
          type: integer
          description: id of the Application configurationkey belongs to
          in: path
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "../definitions.yaml#/ConfigurationKey"
        400:
          description: Bad Request
    put:
      tags:
        - configuration-keys
      summary: Modify excisting configuration key
      parameters:
        - name: ckid
          type: integer
          description: id of the configurationkey
          in: path
          required: true
        - name: appid
          type: integer
          description: id of the Application configurationkey belongs to
          in: path
          required: true
        - name: configurationkey
          in: body
          description: Configurationkey to modify
          required: true
          schema:
            $ref: '../definitions.yaml#/ConfigurationKey'
      responses:
        200:
          description: OK
          schema:
            $ref: '../definitions.yaml#/ConfigurationKey'
        400:
          description: Bad Request
    delete:
      tags:
        - configuration-keys
      summary: Delete one configurationkey
      parameters:
        - name: ckid
          type: integer
          description: id of the configurationkey
          in: path
          required: true
        - name: appid
          type: integer
          description: id of the Application configurationkey belongs to
          in: path
          required: true
      responses:
        200:
          description: OK
        400:
          description: Bad Request

  /applications/{appid}/configurationkeys/{ckid}/rangeconstraints:
    get:
      tags:
        - configuration-keys
      summary: Get rangeconstraints of one configurationkey
      parameters:
        - name: ckid
          type: integer
          description: id of the configurationkey
          in: path
          required: true
        - name: appid
          type: integer
          description: id of the application where configuration key belongs to
          in: path
          required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "../definitions.yaml#/RangeConstraint"
        400:
          description: Bad Request
    delete:
      tags:
        - configuration-keys
      summary: Delete all rangeconstraints of one configurationkey
      parameters:
        - name: ckid
          type: integer
          description: id of the configurationkey
          in: path
          required: true
        - name: appid
          type: integer
          description: id of the application where configuration key belongs to
          in: path
          required: true
      responses:
        200:
          description: OK
        400:
          description: Bad Request
    post:
      tags:
        - configuration-keys
      summary: Create new rangeconstraint
      parameters:
        - name: ckid
          type: integer
          description: id of the configurationkey
          in: path
          required: true
        - name: appid
          type: integer
          description: id of the application where configuration key belongs to
          in: path
          required: true
        - name: rangeconstraint
          in: body
          description: Rangeconstraint to create
          required: true
          schema:
            $ref: '../definitions.yaml#/NewRangeConstraint'
      responses:
        200:
          description: OK
        400:
          description: Bad Request

  applications/{appid}/configurationkeys/{ckid}/rangeconstraints/{rcid}:
    delete:
      tags:
        - range-constraints
      summary: Delete one rangeconstraint
      parameters:
        - name: appid
          type: integer
          description: id of the Application where ConfigurationKey belongs
          in: path
          required: true
        - name : ckid
          type: integer
          description: id of the ConfigurationKey where RangeConstraint belongs to
          in: path
          required: true
        - name: rcid
          type: integer
          description: id of the rangeconstraint
          in: path
          required: true
      responses:
        200:
          description: OK
        400:
          description: Bad Request

  /applications/{appid}/configurationkeys/{ckid}/exclusionconstraints:
    get:
      tags:
        - exclusion-constraint
      summary: Get all exclusionconstraints by Application and ConfigurationKey
      parameters:
        - name: appid
          type: integer
          description: id of the Application where ConfigurationKey belongs
          in: path
          required: true
        - name: ckid
          type: integer
          description: id of ConfigurationKey
          in: path
          required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "../definitions.yaml#/ExclusionConstraint"
    post:
      tags:
        - exclusion-constraint
      summary: Create new ExclusionConstraint to Application
        parameters:
          - name: appid
            type: integer
            description: id of the Application where ConfigurationKey belongs
            in: path
            required: true
          - name: ckid
            type: integer
            description: id of ConfigurationKey
            in: path
            required: true
        responses:
          200:
            description: OK
            schema:
              $ref: "../definitions.yaml#/ExclusionConstraint"
          400:
            description: Bad request

  /applications/{appid}/configurationkeys/{ckid}/exclusionconstraints/{ecid}:
    get:
      tags:
        - exclusion-constraint
      summary: Get one exclusionconstraint
      parameters:
        - name: appid
          type: integer
          description: id of the Application ConfigurationKey belongs to
          in: path
          required: true
        - name: ckid
          type: integer
          description: id of the ConfigurationKey where ExclusionConstraint belongs
          in: path
          required: true
        - name: ecid
          type: integer
          description: id of the exclusionconstraint
          in: path
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "../definitions.yaml#/ExclusionConstraint"
        400:
          description: Bad Request
    delete:
      tags:
        - exclusion-constraint
      summary: Delete one exclusionconstraint
      parameters:
        - name: appid
          type: integer
          description: id of the Application ConfigurationKey belongs to
          in: path
          required: true
        - name: ckid
          type: integer
          description: id of the ConfigurationKey where ExclusionConstraint belongs
          in: path
          required: true
        - name: ecid
          type: integer
          description: id of the exclusionconstraint
          in: path
          required: true
      responses:
        200:
          description: OK
        400:
          description: Bad Request

  /operators:
    get:
      tags:
        - operators
      summary: Get available operators
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "../definitions.yaml#/Operator"

  applications/{appid}/experiments:
    get:
      tags:
        - experiments
      summary: List all experiments
      parameters:
        - name: appid
          in: path
          description: id of Application where Experiment is on
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "../definitions.yaml#/Experiment"
        400:
          description: Bad Request
    post:
      tags:
        - experiments
      summary: Create new experiment
      parameters:
        - name: appid
          in: path
          description: id of Application where Experiment is on
          required: true
          type: integer
        - name: experiment
          in: body
          description: Experiment to create
          required: true
          schema:
            $ref: '../definitions.yaml#/NewExperiment'
      responses:
        200:
          description: OK
          schema:
            $ref: "../definitions.yaml#/Experiment"
        400:
          description: Bad Request


  /applications/{appid}/experiments/{expid}:
    get:
      tags:
        - experiments
      summary: Get one experiment
      parameters:
        - name: appid
          in: path
          description: id of Application where Experiment is on
          required: true
          type: integer
        - name: expid
          type: integer
          description: id of the experiment
          in: path
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "../definitions.yaml#/Experiment"
        400:
          description: Bad Request
    delete:
      tags:
        - experiments
      summary: Delete one experiment
      parameters:
        - name: appid
          in: path
          description: id of Application where Experiment is on
          required: true
          type: integer
        - name: expid
          type: integer
          description: id of the experiment
          in: path
          required: true
      responses:
        200:
          description: OK
        400:
          description: Bad Request

  /applications/{appid}/experiments/{expid}/clients:
    get:
      tags:
        - experiments
      summary: List all clients for one experiment
      parameters:
        - name: appid
        in: path
        description: id of Application where Experiment is on
        required: true
        type: integer
      - name: expid
        type: integer
        description: id of the experiment
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "../definitions.yaml#/Client"
        400:
          description: Bad Request

  /applications/{appid}/experiments/{expid}/metadata:
    get:
      tags:
        - experiments
      summary: return Experiment's metadata
      parameters:
        - name: appid
          in: path
          description: id of Application where Experiment is on
          required: true
          type: integer
        - name: expid
          type: integer
          description: id of the experiment
          in: path
          required: true
      responses:
        200:
          schema:
            type: object               
        400:
          description: Bad Request

  /applications/{appid}/experiments/{expid}/experimentgroups:
    get:
      tags:
        - experiments
      summary: List ExperimentGroups by Application and Experiment
      parameters:
        - name: appid
          type: integer
          description: id of Application where Experiment belongs
          in: path
          required: true
        - name: expid
          type: integer
          description: id of Experiment
          in: path
          required: true
      responses:
        200:
          description: OK
        400:
          description: Bad Request

  /applications/{appid}/experiments/{expid}/experimentgroups/{expgroupid}:
    get:
      tags:
        - experiments
      summary: Get one ExperimentGroup by Application and Experiment
      parameters:
        - name: appid
          type: integer
          description: id of Application where Experiment belongs
          in: path
          required: true
        - name: expid
          type: integer
          description: id of the experiment
          in: path
          required: true
        - name: expgroupid
          type: integer
          description: id of the experimentgroup
          in: path
          required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "../definitions.yaml#/ExperimentGroup"
        400:
          description: Bad Request

    delete:
      tags:
        - experiments
      summary: Delete experimentgroup from one experiment
      parameters:
        - name: appid
          type: integer
          description: id of Application where Experiment belongs
          in: path
          required: true
        - name: expid
          type: integer
          description: id of the experiment
          in: path
          required: true
        - name: expgroupid
          type: integer
          description: id of the experimentgroup
          in: path
          required: true
      responses:
        200:
          description: OK
        400:
          description: Bad Request
